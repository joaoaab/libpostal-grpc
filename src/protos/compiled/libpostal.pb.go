// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: protos/libpostal.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParseAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Country  string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *ParseAddressRequest) Reset() {
	*x = ParseAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_libpostal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseAddressRequest) ProtoMessage() {}

func (x *ParseAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_libpostal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseAddressRequest.ProtoReflect.Descriptor instead.
func (*ParseAddressRequest) Descriptor() ([]byte, []int) {
	return file_protos_libpostal_proto_rawDescGZIP(), []int{0}
}

func (x *ParseAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ParseAddressRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ParseAddressRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type ParsedAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldRegion   string `protobuf:"bytes,1,opt,name=world_region,json=worldRegion,proto3" json:"world_region,omitempty"`       // currently only used for appending “West Indies” after the country name, a pattern frequently used in the English-speaking Caribbean e.g. “Jamaica, West Indies”
	Country       string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`                                  // ISO 3166
	CountryRegion string `protobuf:"bytes,3,opt,name=country_region,json=countryRegion,proto3" json:"country_region,omitempty"` // informal subdivision of a country without any political status
	State         string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`                                      // a first-level administrative division. Scotland, Northern Ireland, Wales, and England in the UK are mapped to "state" as well (convention used in OSM, GeoPlanet, etc.)
	StateDistrict string `protobuf:"bytes,5,opt,name=state_district,json=stateDistrict,proto3" json:"state_district,omitempty"` // usually a second-level administrative division or county.
	Island        string `protobuf:"bytes,6,opt,name=island,proto3" json:"island,omitempty"`                                    // named islands e.g. "Maui"
	City          string `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`                                        // any human settlement including cities, towns, villages, hamlets, localities, etc.
	CityDistrict  string `protobuf:"bytes,8,opt,name=city_district,json=cityDistrict,proto3" json:"city_district,omitempty"`    //  these are usually boroughs or districts within a city that serve some official purpose e.g. "Brooklyn" or "Hackney" or "Bratislava IV"
	Suburb        string `protobuf:"bytes,9,opt,name=suburb,proto3" json:"suburb,omitempty"`                                    // usually an unofficial neighborhood name like "Harlem", "South Bronx", or "Crown Heights"
	Postcode      string `protobuf:"bytes,10,opt,name=postcode,proto3" json:"postcode,omitempty"`                               // postal codes used for mail sorting
	PoBox         string `protobuf:"bytes,11,opt,name=po_box,json=poBox,proto3" json:"po_box,omitempty"`                        // post office box: typically found in non-physical (mail-only) addresses
	Entrance      string `protobuf:"bytes,12,opt,name=entrance,proto3" json:"entrance,omitempty"`                               // numbered/lettered entrance
	Staircase     string `protobuf:"bytes,13,opt,name=staircase,proto3" json:"staircase,omitempty"`                             // numbered/lettered staircase
	Level         string `protobuf:"bytes,14,opt,name=level,proto3" json:"level,omitempty"`                                     // expressions indicating a floor number e.g. "3rd Floor", "Ground Floor", etc.
	Unit          string `protobuf:"bytes,15,opt,name=unit,proto3" json:"unit,omitempty"`                                       // an apartment, unit, office, lot, or other secondary unit designator
	Road          string `protobuf:"bytes,16,opt,name=road,proto3" json:"road,omitempty"`                                       //  street name(s)
	HouseNumber   string `protobuf:"bytes,17,opt,name=house_number,json=houseNumber,proto3" json:"house_number,omitempty"`
	Near          string `protobuf:"bytes,18,opt,name=near,proto3" json:"near,omitempty"`         // phrases like "in", "near", etc. used after a category phrase to help with parsing queries like "restaurants in Brooklyn"
	Category      string `protobuf:"bytes,19,opt,name=category,proto3" json:"category,omitempty"` // for category queries like "restaurants", etc.
	House         string `protobuf:"bytes,20,opt,name=house,proto3" json:"house,omitempty"`       // venue name e.g. "Brooklyn Academy of Music", and building names e.g. "Empire State Building"
}

func (x *ParsedAddressResponse) Reset() {
	*x = ParsedAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_libpostal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsedAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAddressResponse) ProtoMessage() {}

func (x *ParsedAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_libpostal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAddressResponse.ProtoReflect.Descriptor instead.
func (*ParsedAddressResponse) Descriptor() ([]byte, []int) {
	return file_protos_libpostal_proto_rawDescGZIP(), []int{1}
}

func (x *ParsedAddressResponse) GetWorldRegion() string {
	if x != nil {
		return x.WorldRegion
	}
	return ""
}

func (x *ParsedAddressResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ParsedAddressResponse) GetCountryRegion() string {
	if x != nil {
		return x.CountryRegion
	}
	return ""
}

func (x *ParsedAddressResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ParsedAddressResponse) GetStateDistrict() string {
	if x != nil {
		return x.StateDistrict
	}
	return ""
}

func (x *ParsedAddressResponse) GetIsland() string {
	if x != nil {
		return x.Island
	}
	return ""
}

func (x *ParsedAddressResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ParsedAddressResponse) GetCityDistrict() string {
	if x != nil {
		return x.CityDistrict
	}
	return ""
}

func (x *ParsedAddressResponse) GetSuburb() string {
	if x != nil {
		return x.Suburb
	}
	return ""
}

func (x *ParsedAddressResponse) GetPostcode() string {
	if x != nil {
		return x.Postcode
	}
	return ""
}

func (x *ParsedAddressResponse) GetPoBox() string {
	if x != nil {
		return x.PoBox
	}
	return ""
}

func (x *ParsedAddressResponse) GetEntrance() string {
	if x != nil {
		return x.Entrance
	}
	return ""
}

func (x *ParsedAddressResponse) GetStaircase() string {
	if x != nil {
		return x.Staircase
	}
	return ""
}

func (x *ParsedAddressResponse) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *ParsedAddressResponse) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ParsedAddressResponse) GetRoad() string {
	if x != nil {
		return x.Road
	}
	return ""
}

func (x *ParsedAddressResponse) GetHouseNumber() string {
	if x != nil {
		return x.HouseNumber
	}
	return ""
}

func (x *ParsedAddressResponse) GetNear() string {
	if x != nil {
		return x.Near
	}
	return ""
}

func (x *ParsedAddressResponse) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ParsedAddressResponse) GetHouse() string {
	if x != nil {
		return x.House
	}
	return ""
}

var File_protos_libpostal_proto protoreflect.FileDescriptor

var file_protos_libpostal_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x69, 0x62, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x69, 0x62, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x22, 0x65, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xb5,
	0x04, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x75, 0x72, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x75,
	0x72, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x70, 0x6f, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6f, 0x42, 0x6f, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x61,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x32, 0x64, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x12, 0x5a, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x22, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x62, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02,
	0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_libpostal_proto_rawDescOnce sync.Once
	file_protos_libpostal_proto_rawDescData = file_protos_libpostal_proto_rawDesc
)

func file_protos_libpostal_proto_rawDescGZIP() []byte {
	file_protos_libpostal_proto_rawDescOnce.Do(func() {
		file_protos_libpostal_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_libpostal_proto_rawDescData)
	})
	return file_protos_libpostal_proto_rawDescData
}

var file_protos_libpostal_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protos_libpostal_proto_goTypes = []interface{}{
	(*ParseAddressRequest)(nil),   // 0: libpostal.api.ParseAddressRequest
	(*ParsedAddressResponse)(nil), // 1: libpostal.api.ParsedAddressResponse
}
var file_protos_libpostal_proto_depIdxs = []int32{
	0, // 0: libpostal.api.Parser.ParseAddress:input_type -> libpostal.api.ParseAddressRequest
	1, // 1: libpostal.api.Parser.ParseAddress:output_type -> libpostal.api.ParsedAddressResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_libpostal_proto_init() }
func file_protos_libpostal_proto_init() {
	if File_protos_libpostal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_libpostal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_libpostal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParsedAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_libpostal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_libpostal_proto_goTypes,
		DependencyIndexes: file_protos_libpostal_proto_depIdxs,
		MessageInfos:      file_protos_libpostal_proto_msgTypes,
	}.Build()
	File_protos_libpostal_proto = out.File
	file_protos_libpostal_proto_rawDesc = nil
	file_protos_libpostal_proto_goTypes = nil
	file_protos_libpostal_proto_depIdxs = nil
}
