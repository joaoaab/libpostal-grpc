// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressClient is the client API for Address service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressClient interface {
	ParseAddress(ctx context.Context, in *ParseAddressRequest, opts ...grpc.CallOption) (*ParsedAddressResponse, error)
	ExpandAddress(ctx context.Context, in *ExpandAddressRequest, opts ...grpc.CallOption) (*ExpandedAddressResponse, error)
}

type addressClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressClient(cc grpc.ClientConnInterface) AddressClient {
	return &addressClient{cc}
}

func (c *addressClient) ParseAddress(ctx context.Context, in *ParseAddressRequest, opts ...grpc.CallOption) (*ParsedAddressResponse, error) {
	out := new(ParsedAddressResponse)
	err := c.cc.Invoke(ctx, "/libpostal.api.Address/ParseAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) ExpandAddress(ctx context.Context, in *ExpandAddressRequest, opts ...grpc.CallOption) (*ExpandedAddressResponse, error) {
	out := new(ExpandedAddressResponse)
	err := c.cc.Invoke(ctx, "/libpostal.api.Address/ExpandAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServer is the server API for Address service.
// All implementations must embed UnimplementedAddressServer
// for forward compatibility
type AddressServer interface {
	ParseAddress(context.Context, *ParseAddressRequest) (*ParsedAddressResponse, error)
	ExpandAddress(context.Context, *ExpandAddressRequest) (*ExpandedAddressResponse, error)
	mustEmbedUnimplementedAddressServer()
}

// UnimplementedAddressServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServer struct {
}

func (UnimplementedAddressServer) ParseAddress(context.Context, *ParseAddressRequest) (*ParsedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseAddress not implemented")
}
func (UnimplementedAddressServer) ExpandAddress(context.Context, *ExpandAddressRequest) (*ExpandedAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandAddress not implemented")
}
func (UnimplementedAddressServer) mustEmbedUnimplementedAddressServer() {}

// UnsafeAddressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServer will
// result in compilation errors.
type UnsafeAddressServer interface {
	mustEmbedUnimplementedAddressServer()
}

func RegisterAddressServer(s grpc.ServiceRegistrar, srv AddressServer) {
	s.RegisterService(&Address_ServiceDesc, srv)
}

func _Address_ParseAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).ParseAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libpostal.api.Address/ParseAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).ParseAddress(ctx, req.(*ParseAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_ExpandAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).ExpandAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libpostal.api.Address/ExpandAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).ExpandAddress(ctx, req.(*ExpandAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Address_ServiceDesc is the grpc.ServiceDesc for Address service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Address_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libpostal.api.Address",
	HandlerType: (*AddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseAddress",
			Handler:    _Address_ParseAddress_Handler,
		},
		{
			MethodName: "ExpandAddress",
			Handler:    _Address_ExpandAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/protos/libpostal.proto",
}
